---
resources:
- name: indicator-protocol
  type: git
  source:
    uri: https://github.com/pivotal/indicator-protocol
    branch: master
    username: git
    password: {{indicator-protocol-access-token}}
    ignore_paths:
    - README.md
    - ci
    - bosh-release/.final_builds
    - bosh-release/releases
- name: env-state
  type: git
  source:
    branch: master
    uri: git@github.com:pivotal-cf/denver-locks.git
    private_key: {{event-producer-github-key}}
- name: release-version
  type: semver
  source:
    initial_version: 0.0.1
    driver: s3
    bucket: indicator-protocol-release-version
    region_name: us-east-2
    key: version
    access_key_id: {{aws-access-key-id}}
    secret_access_key: {{aws-secret-access-key}}
- name: github-release-drafts
  type: github-release
  source:
    user: pivotal
    repository: indicator-protocol
    access_token: {{indicator-protocol-access-token}}
    drafts: true
jobs:
- name: build-and-test
  plan:
  - aggregate:
    - get: indicator-protocol
      trigger: true
  - task: build-and-test
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfmetrics/indicators-build-and-test
      inputs:
      - name: indicator-protocol
      run:
        path: bash
        args:
          - -c
          - |
            #!/usr/bin/env bash

            set -exu

            pushd indicator-protocol
              scripts/test.sh
            popd

- name: indicator-docs
  plan:
  - aggregate:
    - get: indicator-protocol
      passed: [build-and-test]
      trigger: true
  - task: generate-docs
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfmetrics/indicators-build-and-test
      inputs:
      - name: indicator-protocol
      run:
        path: bash
        args:
        - -c
        - |
          #!/usr/bin/env bash

          set -exu

          export GO111MODULE=on

          pushd indicator-protocol/
            go run -mod=vendor cmd/format/main.go -format bookbinder -indicators example_indicators.yml
          popd

- name: indicator-verification
  plan:
  - aggregate:
    - get: indicator-protocol
      passed: [build-and-test]
      trigger: true
    - get: env-state
  - task: verify-metric
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfmetrics/indicators-build-and-test
      inputs:
      - name: indicator-protocol
      - name: env-state
      params:
        ENVIRONMENT: sunstorm
        BBL_STATE_DIR: acceptance-bosh/claimed/sunstorm
        DEPLOYMENT_NAME: cf-01234567890123456789
      run:
        path: bash
        args:
        - -c
        - |
          #!/usr/bin/env bash

          set -exu

          set +x
          pushd "env-state/${BBL_STATE_DIR}"
            eval "$(bbl print-env)"
          popd
          set -x

          export GO111MODULE=on

          pushd indicator-protocol/

            cat << EOF > indicators.yml
          ---
          apiVersion: v0
          product:
            name: uaa-test
            version: 0
          indicators:
          - name: uaa_request_rate
            promql: rate(requests_global_status_2xx_count{source_id="uaa"}[10m])
          EOF

            uaa_secret="$(credhub g -n /bosh-${ENVIRONMENT}/${DEPLOYMENT_NAME}/uaa_clients_firehose_exporter_secret -j | jq -r .value)"
            access_token=$(curl -X POST "https://login.${ENVIRONMENT}.cf-denver.com/oauth/token" -k -u "firehose_exporter:${uaa_secret}" -H 'Accept: application/json' -d 'grant_type=client_credentials'  | jq -r .access_token)

            go run -mod=vendor cmd/verification/main.go -indicators=indicators.yml \
                                                        -authorization="bearer ${access_token}" \
                                                        -query-endpoint=https://log-cache.${ENVIRONMENT}.cf-denver.com \
                                                        -k

          popd

- name: deploy-indicator-registry
  plan:
  - aggregate:
    - get: env-state
    - get: indicator-protocol
      trigger: true
      passed: [build-and-test]
  - task: deploy
    config:
      params:
        BBL_STATE_DIR: acceptance-bosh/indicator-protocol/madlamp
        S3_ACCESS_KEY: {{aws-access-key-id}}
        S3_SECRET_KEY: {{aws-secret-access-key}}
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfmetrics/indicators-build-and-test
      inputs:
      - name: indicator-protocol
      - name: env-state
      run:
        path: bash
        args:
        - -c
        - |
          #!/bin/bash
          set -ex

          set +x
          pushd "env-state/${BBL_STATE_DIR}"
            eval "$(bbl print-env)"
          popd
          set -x

          mkdir -p indicator-protocol/bosh-release/src/github.com/pivotal/
          rsync -Rr ./indicator-protocol/ ./indicator-protocol/bosh-release/src/github.com/pivotal/

          pushd indicator-protocol/bosh-release

            cat << EOF > config/private.yml
          ---
          blobstore:
            options:
              access_key_id: ${S3_ACCESS_KEY}
              secret_access_key: ${S3_SECRET_KEY}
          EOF

            bosh create-release --force
            bosh -n upload-release --fix --rebase

            bosh update-runtime-config -n \
              --name indicator-registration-agent \
              --var=indicator-protocol-version=$(bosh releases | grep indicator-protocol -m1 | cut -f2) \
              manifests/agent_runtime_config.yml
          popd


          bosh -n -d indicator-registry deploy \
            indicator-protocol/bosh-release/manifests/manifest.yml

- name: publish-release
  plan:
  - aggregate:
    - get: indicator-protocol
      passed: [indicator-verification,indicator-docs,deploy-indicator-registry]
      trigger: false
    - get: release-version
      params: {}
  - task: create-final-release
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfmetrics/indicators-build-and-test
      inputs:
      - name: release-version
      - name: indicator-protocol
      outputs:
      - name: final-release
      - name: github-release
      params:
        RELEASE_NAME: indicator-protocol
        S3_BUCKET: cf-indicators-bosh-blubs
        S3_ACCESS_KEY: {{aws-access-key-id}}
        S3_SECRET_KEY: {{aws-secret-access-key}}
      run:
        path: bash
        args:
        - -c
        - |
          #!/usr/bin/env bash
          set -ex

          BUILD_NUMBER=$(cat release-version/number)
          tag_name="v$BUILD_NUMBER"

          # write out github release files
          echo "${RELEASE_NAME} ${tag_name}" > github-release/name
          echo $tag_name > github-release/tag
          echo "TBD" > github-release/body

          mkdir -p indicator-protocol/bosh-release/src/github.com/pivotal
          rsync -Rr ./indicator-protocol/ ./indicator-protocol/bosh-release/src/github.com/pivotal/

          pushd indicator-protocol/bosh-release
            cat << EOF > config/private.yml
          ---
          blobstore:
            provider: s3
            options:
              bucket_name: ${S3_BUCKET}
              access_key_id: ${S3_ACCESS_KEY}
              secret_access_key: ${S3_SECRET_KEY}
          EOF

            bosh -n create-release --sha2 --final --force \
              --tarball ../../github-release/${RELEASE_NAME}-bosh-${BUILD_NUMBER}.tgz \
              --version "$BUILD_NUMBER"
            git add .

            git config --global user.email "cf-event-producer@pivotal.io"
            git config --global user.name "event-producer-cibot"
            git commit -m "Create final release\

            [ci skip]"
          popd

          cp -r "${RELEASE_NAME}/." "final-release/"

  - task: publish-github-release
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfmetrics/indicators-build-and-test
      inputs:
      - name: indicator-protocol
      - name: release-version
      - name: github-release
      outputs:
      - name: github-release
        path: github-release-output
      run:
        path: bash
        args:
        - -c
        - |
          #!/usr/bin/env bash
          set -ex

          cp github-release/* github-release-output/

          BUILD_NUMBER=$(cat release-version/number)

          pushd indicator-protocol
            echo "Building darwin cli-plugin binary"
            GOARCH=amd64 GOOS=darwin go build -mod=vendor -o ../github-release-output/indicator-format-macosx64-${BUILD_NUMBER} cmd/format/main.go
            GOARCH=amd64 GOOS=darwin go build -mod=vendor -o ../github-release-output/indicator-verification-macosx64-${BUILD_NUMBER} cmd/verification/main.go

            echo "Building amd64 linux cli-plugin binary"
            GOARCH=amd64 GOOS=linux go build -mod=vendor -o ../github-release-output/indicator-format-linux64-${BUILD_NUMBER} cmd/format/main.go
            GOARCH=amd64 GOOS=linux go build -mod=vendor -o ../github-release-output/indicator-verification-linux64-${BUILD_NUMBER} cmd/verification/main.go
          popd
  - put: indicator-protocol
    params:
      repository: indicator-protocol
      rebase: true
      tag: release-version/version
      tag_prefix: v
  - put: indicator-protocol
    params:
      repository: final-release
      rebase: true
  - put: github-release-drafts
    params:
      name: github-release/name
      tag: github-release/tag
      body: github-release/body
      globs:
      - github-release/indicator-*
  - put: release-version
    params:
      bump: patch
